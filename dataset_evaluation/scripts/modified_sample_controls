#!/usr/bin/env python3

import argparse
import random
import subprocess
import sys

import intervaltree
import pandas as pd


def read_narrowpeak(flname):
    df = pd.read_csv(
        flname,
        delim_whitespace=True,
        header=None,
        usecols=[0, 1, 2],
        names=["chromosome", "start", "end"],
    )

    return df


def get_chromosome_sizes(genome_fl):
    cmd = ["bedtools", "genomecov", "-ibam", genome_fl, "-g", genome_fl]
    subprocess.run(cmd, check=True, stderr=subprocess.PIPE)


def shuffle_bed(bed_file, genome_fl):
    shuffled_bed_file = bed_file.replace(".bed", ".shuffled.bed")
    cmd = [
        "bedtools",
        "shuffle",
        "-i",
        bed_file,
        "-g",
        genome_fl,
        "-chrom",
    ]
    with open(shuffled_bed_file, "w") as f:
        subprocess.run(cmd, check=True, stdout=f, stderr=subprocess.PIPE)
    return shuffled_bed_file


def get_fasta_from_bed(shuffled_bed_file, genome_fl, fasta_output, bedtools_path):
    cmd = [
        bedtools_path,
        "getfasta",
        "-fi",
        genome_fl,
        "-bed",
        shuffled_bed_file,
        "-fo",
        fasta_output,
    ]
    subprocess.run(cmd, check=True, stderr=subprocess.PIPE)


# def read_fasta(flname):
#     sequences = dict()
#     with open(flname) as fl:
#         seq_name = None
#         seq = ""
#         for ln in fl:
#             if ln.startswith(">"):
#                 if seq_name != None:
#                     sequences[seq_name] = seq
#                 seq_name = ln[1:].strip().split()[0]
#                 print(seq)
#                 seq = ""
#             else:
#                 seq += ln.strip()

#         if seq_name != None:
#             sequences[seq_name] = seq

#     return sequences


def read_fasta(flname):
    sequences = dict()
    with open(flname) as fl:
        seq_name = None
        seq = ""
        for ln in fl:
            if ln.startswith(">"):
                if seq_name != None:
                    sequences[seq_name] = seq
                seq_name = ln.strip().split(":")[0][1:]

                # print(seq_name)
                seq = ""
            else:
                # print(ln.strip())
                seq += ln.strip()

    print(sequences.keys())
    return sequences


def sample_control_windows(peak_df, window_size, chrom_sizes):
    # we want to ensure that the controls do not overlap
    # the peaks
    exclusions = {
        chrom: intervaltree.IntervalTree() for chrom in set(peak_df["chromosome"])
    }
    for idx, row in peak_df.iterrows():
        exclusions[row.chromosome][row.start : row.end + 1] = "peak"

    # to use in sampling chromosomes proportionally to the treatment set
    chrom_universe = list(peak_df["chromosome"])

    # Keep track of progress
    print(chrom_sizes)
    sampled_controls = []
    for idx, row in peak_df.iterrows():
        count = idx + 1
        chrom = random.choice(chrom_universe)
        size = chrom_sizes[chrom]
        interval_start = 0
        interval_end = size - 1

        valid_range = False
        n_attempts = 0
        while not valid_range and n_attempts < 1000:
            # Randomly select new range
            # Generate random start and end with given width
            # ensure that control sequence does not extend past interval boundary

            # convert to 1-indexed
            control_start = (
                random.randint(interval_start, interval_end - window_size) + 1
            )
            control_end = control_start + window_size

            n_attempts += 1

            # check if the sample overlaps anything in the exclusion list
            if len(exclusions[chrom][control_start:control_end]) == 0:
                valid_range = True
                sampled_controls.append((chrom, control_start, control_end))

                # add sample to list of exclusions
                exclusions[chrom][control_start:control_end] = "control"

                print(
                    "Found control sequence " + str(count + 1) + "/" + str(len(peak_df))
                )
        if n_attempts == 1000:
            print("Unable to find satisfactory control.  Skipping.")

    return pd.DataFrame.from_records(
        sampled_controls, columns=["chromosome", "start", "end"]
    )


def extract_sequences(genome_seqs, peak_df):
    sequences = dict()
    for idx, row in peak_df.iterrows():
        chrom = row.chromosome
        seq = genome_seqs[chrom][row.start : row.end + 1]
        name = "{}_{}_{}".format(chrom, row.start, row.end)
        sequences[name] = seq

    return sequences


def write_fasta(flname, seqs):
    with open(flname, "wt") as fl:
        for name, seq in seqs.items():
            fl.write(">")
            fl.write(name)
            fl.write("\n")
            fl.write(seq)
            fl.write("\n")


# def shuffle_bed(input_bed, genome_fasta):
#     """
#     Uses bedtools shuffle command.

#     Parameters:
#         -chrom      : shuffling happens per chromosome
#         -i          : input file will be shuffled
#         input_bed   : path to input BED file
#         -g          : specify genome FASTA for info about chromosome sizes
#         genome_fasta: path to genome FASTA
#         -seed       : sets random seed
#     """
#     shuffled = "shuffled.bed"
#     cmd = [
#         "bedtools",
#         "shuffle",
#         "-chrom",
#         "-i",
#         input_bed,
#         "-g",
#         genome_fasta,
#         "-seed",
#         "1",
#     ]
#     subprocess.run(cmd, stdout=open(shuffled, "w"))
#     return shuffled


def get_fasta_length(genome_fasta):
    """
    Uses bedtools to get length of the FASTA file.

    Parameters:
        nucleotide_content: gets composition of sequence
        -fi               : FASTA input
    """
    cmd = ["bedtools", "nucleotide_content", "-fi", genome_fasta]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, text=True)
    fasta_lengths = {}
    for line in result.stdout.split("\n"):
        if line:
            parts = line.split("\t")
            fasta_lengths[parts[0]] = int(parts[1])
    return fasta_lengths


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--peaks-fl", required=True, type=str, help="NarrowPeak file from MACS"
    )

    parser.add_argument(
        "--genome-fl", required=True, type=str, help="Genome FASTA file"
    )

    parser.add_argument(
        "--window-size",
        required=True,
        type=int,
        help="Window size to use for sequences",
    )

    parser.add_argument(
        "--output-tmnt-bed", required=True, type=str, help="Resulting treatment windows"
    )

    parser.add_argument(
        "--output-tmnt-fasta",
        required=True,
        type=str,
        help="Resulting treatment sequences",
    )

    parser.add_argument(
        "--output-ctrl-bed", required=True, type=str, help="Resulting control windows"
    )

    parser.add_argument(
        "--output-ctrl-fasta",
        required=True,
        type=str,
        help="Resulting control sequences",
    )

    parser.add_argument("--selected-chromosomes", nargs="+")

    parser.add_argument(
        "--bed-genome-fl",
        required=True,
        type=str,
        help="Needed for the bedtools shuffle call",
    )

    args = parser.parse_args()

    with open(args.peaks_fl, "r") as bed_file, open(
        args.bed_genome_fl, "w"
    ) as genome_file:
        for line in bed_file:
            fields = line.strip().split("\t")
            if len(fields) < 9:
                continue

            chromosome = fields[0]
            start = int(fields[1])
            end = int(fields[2])

            # Map the chromosome name
            # chromosome = chromosome_mapping.get(chromosome, chromosome)

            # Write the information to the genome file
            genome_file.write(f"{chromosome}\t{end - start}\n")

    print(f"FASTA length: {get_fasta_length(args.genome_fl)}")

    is_window_even = args.window_size % 2 == 0
    if is_window_even:
        print("Window size must be odd.")
        sys.exit(1)

    # New functionality JS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    print(args.peaks_fl, args.genome_fl)
    # print("Shuffling bed file...")
    # shuffled = shuffle_bed(args.peaks_fl, args.bed_genome_fl)  # shuffles BED file
    # print("Shuffled bed file complete.")
    lengths = get_fasta_length(
        args.genome_fl
    )  # gets lengths of sequences in the FASTA file
    # args.peaks_fl = shuffled  # use shuffled BED
    args.peak_fl = "input/tad_classification.shuffled.bed"
    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    peak_df = read_narrowpeak(args.peaks_fl)

    if args.selected_chromosomes:
        query = " or ".join(
            map(lambda s: "chromosome == '{}'".format(s), args.selected_chromosomes)
        )
        print(query)
        peak_df = peak_df.query(query).copy()

    genome_seq = read_fasta(args.genome_fl)
    if len(genome_seq) > 1:
        print("genome seq seems right")
    genome_seq = {
        name: seq
        for name, seq in genome_seq.items()
        if len(args.selected_chromosomes) == 0 or name in args.selected_chromosomes
    }
    chrom_sizes = {name: len(seq) for name, seq in genome_seq.items()}

    control_df = sample_control_windows(peak_df, args.window_size, chrom_sizes)

    peak_seq = extract_sequences(genome_seq, peak_df)

    control_seq = extract_sequences(genome_seq, control_df)

    control_df.to_csv(args.output_ctrl_bed, header=None, index=False, sep="\t")

    peak_df.to_csv(args.output_tmnt_bed, header=None, index=False, sep="\t")

    # New functionality JS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    # use bedtools getfasta to extract sequences
    cmd_tmnt = [
        "bedtools",
        "getfasta",
        "-fi",
        args.genome_fl,
        "-bed",
        args.peaks_fl,
        "-fo",
        args.output_tmnt_fasta,
    ]
    subprocess.run(cmd_tmnt)

    cmd_ctrl = [
        "bedtools",
        "getfasta",
        "-fi",
        args.genome_fl,
        "-bed",
        args.output_ctrl_bed,
        "-fo",
        args.output_ctrl_fasta,
    ]
    subprocess.run(cmd_ctrl)
    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    write_fasta(args.output_tmnt_fasta, peak_seq)

    write_fasta(args.output_ctrl_fasta, control_seq)


if __name__ == "__main__":
    main()
