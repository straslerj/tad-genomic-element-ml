# these two have to be in the same order
# peaks = ["251", "501", "1001"]
peaks = ["tad"]

# determines used in the ROC curve plot
# experiment_names = ["251", "501", "1001"]
experiment_names = ["tad"]

N_ESTIMATORS = 48
REG_WEIGHT = 0.1

# The heterochromatin and other scaffolds are pretty small
# so we won't use them
CHROMOSOMES = ["chr2L", "chr2R", "chr3L", "chr3R", "chrX"]
# CHROMOSOMES = ["2L", "2R", "3L", "3R", "X"]


rule all:
    input:
        #tmnt_bed=expand("data/sequences/{exp}/tmnt.bed", exp=experiment_names),
        tmnt_fa=expand("data/sequences/{exp}/tmnt.fa", exp=experiment_names),
        ctrl_bed=expand("data/sequences/{exp}/ctrl.bed", exp=experiment_names),
        ctrl_fa=expand("data/sequences/{exp}/ctrl.fa", exp=experiment_names),
        roc_curve="data/figures/roc_curve.png"

        #ctrl_bed="data/sequences/{exp}/ctrl.bed",
        #ctrl_fa="data/sequences/{exp}/ctrl.fa"

rule extract_positives:
    input:
        peaks="input/{exp}_classification.bed",
        genome="input/dm3.fa"
        # genome="input/dmel-all-chromosome-r6.54.fasta"
    output:
        tmnt_fa="data/sequences/{exp}/tmnt.fa"
    threads:
        1
    shell:
        "./bedtools getfasta -fi {input.genome} -bed {input.peaks} > {output.tmnt_fa}"

rule shuffle_positives:
    input:
        peaks="input/{exp}_classification.bed",
        genome_size="input/genome.size"
    output:
        ctrl_bed="data/sequences/{exp}/ctrl.bed"
    threads:
        1
    shell:
        "./bedtools shuffle -g {input.genome_size} -i {input.peaks} > {output.ctrl_bed}"

rule extract_controls:
    input:
        peaks="data/sequences/{exp}/ctrl.bed",
        genome="input/dm3.fa"
        # genome="input/dmel-all-chromosome-r6.54.fasta"
    output:
        ctrl_fa="data/sequences/{exp}/ctrl.fa"
    threads:
        1
    shell:
        "./bedtools getfasta -fi {input.genome} -bed {input.peaks} > {output.ctrl_fa}"

rule evaluate_models:
    input:
        tmnt_fa="data/sequences/{exp}/tmnt.fa",
        ctrl_fa="data/sequences/{exp}/ctrl.fa"
    params:
        reg_weight=REG_WEIGHT,
        n_estimators=N_ESTIMATORS,
        selected_chrom=" ".join(CHROMOSOMES)
    output:
        npz="data/model_predictions/{exp}.npz",
        pos_bed="data/model_predictions/{exp}_pos.bed",
        neg_bed="data/model_predictions/{exp}_neg.bed"
    threads:
        24
    shell:
        "scripts/train_and_evaluate_models --tmnt-fasta {input.tmnt_fa} --ctrl-fasta {input.ctrl_fa} --reg-weight {params.reg_weight} --predictions-fl {output.npz} --select-chrom {params.selected_chrom} --n-jobs {threads} --positive-bed-fl {output.pos_bed} --negative-bed-fl {output.neg_bed} &> {output.npz}.log"

rule plot_roc_curve:
    input:
        expand("data/model_predictions/{peak_exp}.npz", peak_exp=peaks)
    params:
        names=" ".join(experiment_names)
    output:
        "data/figures/roc_curve.png"
    threads:
        1
    shell:
        "scripts/plot_roc_curve --result-npzs {input} --experiment-names {params.names} --plot-fl {output}"
        
rule run_experiments:
    input:
        # treatment_bed_fls=expand("data/sequences/{peak_exp}/tmnt.bed",
        #                          peak_exp=peaks),
        # pred_fls=expand("data/model_predictions/{peak_exp}.npz",
        #                 peak_exp=peaks),
        roc="data/figures/roc_curve.png"

